import os
import json
import argparse
import typing

from collections import defaultdict
from pero_ocr.sequence_alignment import levenshtein_distance


def parse_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument("--json", help="Path to JSON file with annotated data.")
    parser.add_argument("--alignments", help="Path to folder with the alignments.")
    parser.add_argument("--transcription", help="Path to folder with transcription files.")

    args = parser.parse_args()

    return args


def load_annotations(path: str) -> dict:
    with open(path, "r") as f:
        return json.load(f)

    
def load_ocr(folder: str, filename: str) -> str:
    path = os.path.join(folder, filename)

    with open(path, "r") as f:
        return f.read().replace('\n', '')


def load_alignment(folder: str, filename: str) -> str:
    path = os.path.join(folder, filename)
    data = defaultdict(lambda: "")

    with open(path, "r") as f:
        for line in f:
            s = line.split("'")
            key = s[1]

            if key in data:
                data[key] += s[3]
            else:
                data[key] = s[3]

    return data


def main() -> int:
    args = parse_arguments()

    annotations = load_annotations(args.json)

    total_error = 0

    for annotated_file in annotations:
        if "label" in annotated_file: # Filter out wrong matches
            filename = annotated_file["text"].rpartition("/")[2]

            try: # We do not have all the files yes, skipping those we don't have
                alignment = load_alignment(args.alignments, filename) # Dictionary loaded from file generated by alignment script
                ocr = load_ocr(args.transcription, filename) # String containing ocr transcription without \n
            except FileNotFoundError:
                continue

            for annotation in annotated_file["label"]:
                string_to_match = ocr[annotation["start"]:annotation["end"]].lower() # String from OCR annotated by person
                label = annotation["labels"][0]

                string_matching = alignment[label].lower() # String from the alignment script

                total_error += levenshtein_distance(list(string_matching), list(string_to_match))

    print(f"Total error on all files is: {total_error}")

    return 0


if __name__ == "__main__":
    exit(main())
